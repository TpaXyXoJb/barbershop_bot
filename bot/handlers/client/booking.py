from aiogram import Router, types, F
from aiogram.types import (InlineKeyboardMarkup,
                           InlineKeyboardButton,
                           ReplyKeyboardMarkup,
                           KeyboardButton,
                           ReplyKeyboardRemove
                           )
from datetime import datetime, timedelta

from .start import menu_keyboard
from bot.temp_state import user_state

router = Router()

fake_masters = ["–ê–Ω–Ω–∞", "–ò–≤–∞–Ω", "–ú–∞—Ä–∏—è"]
fake_categories = ["–ú—É–∂—Å–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏", "–ñ–µ–Ω—Å–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏"]
fake_services = {
    "–ú—É–∂—Å–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏": ["–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è", "–ü–æ–¥ –º–∞—à–∏–Ω–∫—É", "Fade"],
    "–ñ–µ–Ω—Å–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏": ["–ö–∞—Ä–µ", "–ü–∏–∫—Å–∏", "–ö–∞—Å–∫–∞–¥"]
}
fake_times = ["10:00", "11:00", "12:00", "14:00", "15:00", "16:00"]


def get_masters_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"select_master:{name}")]
        for name in fake_masters
    ])
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu")
    ])
    return keyboard


def get_categories_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat, callback_data=f"select_category:{cat}")]
        for cat in fake_categories
    ])
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="book_appointment")
    ])
    return keyboard


def get_services_keyboard(category: str) -> InlineKeyboardMarkup:
    services = fake_services.get(category, [])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=service, callback_data=f"select_service:{service}")]
        for service in services
    ])
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="book_appointment")
    ])
    return keyboard


def get_dates_keyboard() -> InlineKeyboardMarkup:
    today = datetime.today()
    dates = [(today + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(10)]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=date, callback_data=f"select_date:{date}")]
        for date in dates
    ])
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="book_appointment")
    ])
    return keyboard


def get_time_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=time, callback_data=f"select_time:{time}")]
        for time in fake_times
    ])
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="book_appointment")
    ])
    return keyboard


def get_phone_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )


@router.callback_query(F.data == "menu")
async def go_back_to_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=menu_keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "book_appointment")
async def choose_master(callback: types.CallbackQuery):
    user_state[callback.from_user.id] = {}
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:",
        reply_markup=get_masters_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("select_master:"))
async def choose_category(callback: types.CallbackQuery):
    master = callback.data.split(":")[1]
    user_state[callback.from_user.id]["master"] = master
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞: {master}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
        reply_markup=get_categories_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("select_category:"))
async def choose_service(callback: types.CallbackQuery):
    category = callback.data.split(":")[1]
    user_state[callback.from_user.id]["category"] = category
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=get_services_keyboard(category)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("select_service:"))
async def choose_date(callback: types.CallbackQuery):
    service = callback.data.split(":")[1]
    user_state[callback.from_user.id]["service"] = service
    await callback.message.edit_text(
        f"–£—Å–ª—É–≥–∞: {service}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=get_dates_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("select_date:"))
async def choose_time(callback: types.CallbackQuery):
    date = callback.data.split(":")[1]
    user_state[callback.from_user.id]["date"] = date
    await callback.message.edit_text(
        f"–î–∞—Ç–∞: {date}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=get_time_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("select_time:"))
async def ask_phone(callback: types.CallbackQuery):
    time = callback.data.split(":")[1]
    state = user_state.get(callback.from_user.id, {})
    state["time"] = time
    msg = (
        f"–ú–∞—Å—Ç–µ—Ä: {state.get('master')}\n"
        f"–£—Å–ª—É–≥–∞: {state.get('service')}\n"
        f"–î–∞—Ç–∞: {state.get('date')}\n"
        f"–í—Ä–µ–º—è: {time}\n"
        "üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:"
    )
    await callback.message.answer(
        msg,
        reply_markup=get_phone_keyboard()
    )
    await callback.answer()


@router.message(F.contact)
async def process_contact(message: types.Message):
    phone = message.contact.phone_number
    await message.answer(
        f"‚úÖ –ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω: {phone}",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer("–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ (–∑–∞–≥–ª—É—à–∫–∞)")
